{"version":3,"sources":["utils/Loader.module.css","components/CityInfo/CityHeader.tsx","components/CityInfo/CityWeather.tsx","components/CityInfo/CityWeatherCard.tsx","components/CityInfo/CityWeatherData.tsx","components/ForecatHour.tsx","components/Forecast.tsx","components/CityInfo.tsx","service/service.ts","redux/reducer.ts","utils/Alert.tsx","components/Header.tsx","components/CityItem.tsx","utils/Loader.tsx","components/SearchedCitiesList.tsx","components/ListOfSities.tsx","App.tsx","reportWebVitals.js","redux/store.ts","index.tsx"],"names":["module","exports","CityHeader","name","country","date","className","CityWeather","iconUrl","temp","description","src","alt","CityWeatherCard","data","text","CityWeatherData","highestTemp","lowestTemp","wind","sunrise","sunset","humidity","ForecastHour","forecastData","Math","floor","main","weather","icon","month","dt_txt","slice","day","hour","Forecast","forecasts","forecast","map","item","dt","CityInfo","withRouter","props","cityId","match","params","city","useSelector","state","reducer","searchedCities","iconCode","Service","id","Promise","all","fetch","response","res1","res2","ok","json","listOfCitiesJSON","window","localStorage","getItem","initialState","currentWeather","pressure","clouds","JSON","parse","loading","alert","error","getWeatherThunk","createAsyncThunk","a","getWeatherData","console","log","weatherSlice","createSlice","reducers","getWeather","action","payload","deleteCity","setItem","stringify","extraReducers","builder","addCase","pending","fulfilled","data1","data2","cod","currentDate","Date","getDay","getDate","getMonth","sys","toLocaleTimeString","temp_max","temp_min","speed","list","actions","Alert","role","Header","useState","setText","dispatch","useDispatch","buttonHandler","e","preventDefault","onSubmit","type","value","placeholder","onChange","target","style","backgroundColor","border","CityItem","cityData","marginBottom","marginTop","onClick","onDelete","width","aria-label","aria-hidden","toUpperCase","color","to","Loader","s","position","lds_ellipsis","SearchedList","Object","values","length","reverse","i","random","ListOfCities","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a13c09d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"position\":\"Loader_position__2MPw1\",\"lds_ellipsis\":\"Loader_lds_ellipsis__hmAlb\",\"lds-ellipsis1\":\"Loader_lds-ellipsis1__2yOT7\",\"lds-ellipsis2\":\"Loader_lds-ellipsis2__2zSDJ\",\"lds-ellipsis3\":\"Loader_lds-ellipsis3__1X2Wz\"};","type CityObj = {\r\n  name: string;\r\n  date: string;\r\n  country: string;\r\n};\r\n\r\nexport const CityHeader: React.FC<CityObj> = ({ name, country, date }) => {\r\n  return (\r\n    <div className=\"city-info\">\r\n      <h2>\r\n        {name} {country}\r\n      </h2>\r\n      <h4>{date}</h4>\r\n    </div>\r\n  );\r\n};\r\n","type CityObj = {\r\n  iconUrl: string;\r\n  temp: number;\r\n  description: string;\r\n};\r\n\r\nexport const CityWeather: React.FC<CityObj> = ({\r\n  iconUrl,\r\n  temp,\r\n  description,\r\n}) => {\r\n  return (\r\n    <div className=\"city-weather-wrapper\">\r\n      <div className=\"city-icon\">\r\n        <img src={iconUrl} alt=\"img\" />\r\n      </div>\r\n      <div className=\"city-weather-temp\">\r\n        <h3>{temp}°</h3>\r\n        <h4>{description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","type CityObj = {\r\n  data: any;\r\n  text: string;\r\n};\r\n\r\nexport const CityWeatherCard: React.FC<CityObj> = ({ data, text }) => {\r\n  return (\r\n    <div className=\"city-weather-data-info\">\r\n      <h4>{data}</h4>\r\n      <span>{text}</span>\r\n    </div>\r\n  );\r\n};\r\n","import { CityWeatherCard } from './CityWeatherCard';\r\n\r\ntype CityObj = {\r\n  highestTemp: number;\r\n  lowestTemp: number;\r\n  wind: number;\r\n  sunrise: string;\r\n  sunset: string;\r\n  humidity: number;\r\n};\r\n\r\nexport const CityWeatherData: React.FC<CityObj> = ({\r\n  highestTemp,\r\n  lowestTemp,\r\n  wind,\r\n  sunrise,\r\n  sunset,\r\n  humidity,\r\n}) => {\r\n  return (\r\n    <div className=\"city-weather-data\">\r\n      <CityWeatherCard data={highestTemp + '°'} text={'Максимальная'} />\r\n      <CityWeatherCard data={lowestTemp + '°'} text={'Минимальная'} />\r\n      <CityWeatherCard data={wind + ' миль/ч'} text={'Bетeр'} />\r\n      <CityWeatherCard data={humidity + '%'} text={'Влажность'} />\r\n      <CityWeatherCard data={sunrise} text={'Восход'} />\r\n      <CityWeatherCard data={sunset} text={'Закат'} />\r\n    </div>\r\n  );\r\n};\r\n","import { ForecastItemType } from '../types';\r\n\r\ntype ForecastHourType = {\r\n  forecastData: ForecastItemType;\r\n};\r\n\r\nexport const ForecastHour: React.FC<ForecastHourType> = ({ forecastData }) => {\r\n  const temp = Math.floor(forecastData.main.temp * 1) / 1,\r\n    // pressure = forecastData.main.pressure,\r\n    description = forecastData.weather[0].description,\r\n    icon = forecastData.weather[0].icon,\r\n    month = forecastData.dt_txt.slice(5, 7),\r\n    day = forecastData.dt_txt.slice(8, 10),\r\n    hour = forecastData.dt_txt.slice(11, 13);\r\n  const iconUrl = `https://openweathermap.org/img/w/${icon}.png`;\r\n\r\n  return (\r\n    <div className=\"forecast-wrapper\">\r\n      <span>\r\n        {day}.{month}\r\n      </span>\r\n      <span>{hour}.00</span>\r\n      <img src={iconUrl} alt=\"icon\" />\r\n      <span>{description}</span>\r\n      <h4>{temp}°</h4>\r\n    </div>\r\n  );\r\n};\r\n","import { ForecastHour } from './ForecatHour';\r\nimport { ForecastItemType } from '../types';\r\n\r\ntype ForecastType = {\r\n  forecast: any;\r\n};\r\n\r\nexport const Forecast: React.FC<ForecastType> = ({ forecast }) => {\r\n  const forecasts = forecast.map((item: ForecastItemType) => {\r\n    return <ForecastHour key={item.dt} forecastData={item} />;\r\n  });\r\n\r\n  return <div className=\"forecasts\">{forecasts}</div>;\r\n};\r\n","import { useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { RootApp } from '../types';\r\nimport { CityHeader } from './CityInfo/CityHeader';\r\nimport { CityWeather } from './CityInfo/CityWeather';\r\nimport { CityWeatherData } from './CityInfo/CityWeatherData';\r\nimport { Forecast } from './Forecast';\r\n\r\nconst CityInfoComponent = (props: any) => {\r\n  let cityId = props.match.params.cityId;\r\n\r\n  const city = useSelector((state: RootApp) => {\r\n    return state.reducer.searchedCities[cityId];\r\n  });\r\n\r\n  const {\r\n    name,\r\n    country,\r\n    date,\r\n    temp,\r\n    highestTemp,\r\n    lowestTemp,\r\n    description,\r\n    wind,\r\n    humidity,\r\n    iconCode,\r\n    sunrise,\r\n    sunset,\r\n    forecast,\r\n  } = city;\r\n\r\n  const iconUrl = `https://openweathermap.org/img/w/${iconCode}.png`;\r\n\r\n  return (\r\n    <div className=\"city\">\r\n      <div className=\"city-wrap\">\r\n        <CityHeader name={name} country={country} date={date} />\r\n        <CityWeather iconUrl={iconUrl} temp={temp} description={description} />\r\n        <CityWeatherData\r\n          highestTemp={highestTemp}\r\n          lowestTemp={lowestTemp}\r\n          wind={wind}\r\n          sunrise={sunrise}\r\n          sunset={sunset}\r\n          humidity={humidity}\r\n        />\r\n      </div>\r\n      <Forecast forecast={forecast} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CityInfo = withRouter(CityInfoComponent);\r\n","class Service {\r\n  static async getWeatherData(id: string) {\r\n    const weather = `https://api.openweathermap.org/data/2.5/weather?q=${id}&lang=ru&appid=a9ebdb68b0dbf40182f5638efcca3afd&units=metric`;\r\n    const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${id}&lang=ru&appid=a9ebdb68b0dbf40182f5638efcca3afd&units=metric`;\r\n\r\n    const response = await Promise.all([fetch(weather), fetch(forecast)]);\r\n\r\n    try {\r\n      const [res1, res2] = response;\r\n      if (res1.ok && res2.ok) {\r\n        return Promise.all([res1.json(), res2.json()]);\r\n      }\r\n      return;\r\n    } catch {\r\n      return 'Not found';\r\n    }\r\n  }\r\n}\r\n\r\nexport default Service;\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport Service from '../service/service';\nimport { InitialStateType } from '../types';\n\nconst listOfCitiesJSON = window.localStorage.getItem('listOfCities');\n\nconst initialState = {\n  currentWeather: {\n    name: 'Chegem',\n    description: '',\n    temp: 10,\n    wind: 0,\n    humidity: 0,\n    pressure: 0,\n    icon: '',\n    iconCode: '',\n    id: null,\n    country: '',\n    highestTemp: 0,\n    lowestTemp: 0,\n    clouds: 0,\n    sunrise: '',\n    sunset: '',\n    date: '',\n    forecast: [],\n  },\n  // searchedCities: window.localStorage.getItem('listOfCities')\n  //   ? JSON.parse(window.localStorage.getItem('listOfCities'))\n  //   : {},\n  searchedCities: listOfCitiesJSON !== null ? JSON.parse(listOfCitiesJSON) : {},\n  loading: false,\n  alert: false,\n  error: '',\n};\n\nexport const getWeatherThunk = createAsyncThunk(\n  'weather/getWeatherThunk',\n  async (id: string) => {\n    const response = Service.getWeatherData(id);\n    console.log(response);\n    return response;\n  }\n);\n\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState: initialState as InitialStateType,\n  reducers: {\n    getWeather(state, action) {\n      state.currentWeather.name = action.payload.name;\n      state.currentWeather.temp = action.payload.temp;\n    },\n    deleteCity(state, action) {\n      delete state.searchedCities[action.payload];\n      window.localStorage.setItem(\n        'listOfCities',\n        JSON.stringify(state.searchedCities)\n      );\n      console.log(state.searchedCities);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getWeatherThunk.pending, (state, action) => {\n        state.loading = true;\n      })\n      .addCase(getWeatherThunk.fulfilled, (state, action) => {\n        if (!action.payload) {\n          state.loading = false;\n          state.alert = true;\n          state.error =\n            'Пожалуйста введите корректное название города для поиска.';\n          return state;\n        }\n        const [data1, data2] = action.payload;\n        if (data1.cod === '400' || !data1) {\n          state.loading = false;\n          state.alert = true;\n          state.error =\n            'Пустой ввод. Пожалуйста введите название города для поиска.';\n          return state;\n        }\n\n        if (data1.cod === '404') {\n          state.loading = false;\n          state.alert = true;\n          state.error = 'Город не найден';\n          return state;\n        }\n\n        console.log(action.payload);\n        if (data1.cod !== '400') {\n          const months = [\n            'Январь',\n            'Февраль',\n            'Март',\n            'Апрель',\n            'Май',\n            'Июнь',\n            'Июль',\n            'Август',\n            'Сентябрь',\n            'Октябрь',\n            'Ноябрь',\n            'Декабрь',\n          ];\n          const days = [\n            'Воскресенье',\n            'Понедельник',\n            'Вторник',\n            'Среда',\n            'Четверг',\n            'Пятница',\n            'Суббота',\n          ];\n          const currentDate = new Date();\n          const date = `${\n            days[currentDate.getDay()]\n          } ${currentDate.getDate()} ${months[currentDate.getMonth()]}`;\n          const sunset = new Date(data1.sys.sunset * 1000)\n            .toLocaleTimeString()\n            .slice(0, 5);\n          const sunrise = new Date(data1.sys.sunrise * 1000)\n            .toLocaleTimeString()\n            .slice(0, 5);\n          state.currentWeather = {\n            ...state.currentWeather,\n            name: data1.name,\n            country: data1.sys.country,\n            temp: data1.main.temp,\n            highestTemp: data1.main.temp_max,\n            lowestTemp: data1.main.temp_min,\n            wind: data1.wind.speed,\n            description: data1.weather[0].description,\n            humidity: data1.main.humidity,\n            pressure: data1.main.pressure,\n            iconCode: data1.weather[0].icon,\n            id: data1.id,\n            clouds: data1.clouds.all,\n            sunrise,\n            sunset,\n            date,\n            forecast: data2.list,\n          };\n\n          state.searchedCities[data1.id] = state.currentWeather;\n          state.alert = false;\n          localStorage.setItem(\n            'listOfCities',\n            JSON.stringify(state.searchedCities)\n          );\n        }\n        state.loading = false;\n        return;\n      });\n  },\n});\n\nexport const { getWeather, deleteCity } = weatherSlice.actions;\nexport default weatherSlice.reducer;\n","import React from 'react';\r\n\r\ntype AlertType = {\r\n  text: string;\r\n};\r\n\r\nexport const Alert: React.FC<AlertType> = ({ text }) => {\r\n  return (\r\n    <div className=\"alert alert-info\" role=\"alert\">\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getWeatherThunk } from '../redux/reducer';\r\nimport { RootApp } from '../types';\r\nimport { Alert } from '../utils/Alert';\r\n\r\nexport const Header = () => {\r\n  const [text, setText] = useState('');\r\n  const dispatch = useDispatch();\r\n  const alert = useSelector((state: RootApp) => state.reducer.alert);\r\n  const error = useSelector((state: RootApp) => state.reducer.error);\r\n\r\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setText(e.target.value);\r\n  };\r\n  const buttonHandler = async (e: React.SyntheticEvent) => {\r\n    e.preventDefault();\r\n    await dispatch(getWeatherThunk(text));\r\n    setText('');\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={buttonHandler}>\r\n        {alert ? <Alert text={error} /> : null}\r\n\r\n        <div className=\"input-group mb-3\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n            value={text}\r\n            name=\"title\"\r\n            placeholder=\"Город\"\r\n            onChange={inputHandler}\r\n          />\r\n\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              className=\"btn btn-info\"\r\n              type=\"submit\"\r\n              style={{ backgroundColor: '#b690da', border: '#b690da' }}\r\n            >\r\n              Поиск\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n","import { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { deleteCity } from '../redux/reducer';\r\nimport { currentWeatherType } from '../types';\r\n\r\ntype CityItemType = {\r\n  cityData: currentWeatherType;\r\n};\r\n\r\nexport const CityItem: React.FC<CityItemType> = ({ cityData }) => {\r\n  const {\r\n    name,\r\n    country,\r\n    date,\r\n    temp,\r\n    highestTemp,\r\n    lowestTemp,\r\n    description,\r\n    wind,\r\n    humidity,\r\n    pressure,\r\n    iconCode,\r\n    sunrise,\r\n    sunset,\r\n    clouds,\r\n    id,\r\n  } = cityData;\r\n\r\n  const dispatch = useDispatch();\r\n  const onDelete = (id: any) => {\r\n    dispatch(deleteCity(id));\r\n  };\r\n  const iconUrl = `https://openweathermap.org/img/w/${iconCode}.png`;\r\n  return (\r\n    <>\r\n      <div className=\"col-sm-6 shadow-lg p-3 mb-5 rounded\">\r\n        <div\r\n          className=\"card\"\r\n          style={{ marginBottom: '15px', marginTop: '15px' }}\r\n        >\r\n          <h5 className=\"card-header\">\r\n            {name} {country}\r\n            <button\r\n              onClick={() => onDelete(id)}\r\n              style={{ width: '40px' }}\r\n              type=\"button\"\r\n              className=\"close float-right\"\r\n              aria-label=\"Close\"\r\n            >\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </h5>\r\n\r\n          <div className=\"card-body\">\r\n            <img src={iconUrl} alt={description} />\r\n            <blockquote className=\"blockquote mb-0\">\r\n              <p> Температура: {temp} °C</p>\r\n              <footer className=\"blockquote-footer\">\r\n                {description[0].toUpperCase() + description.slice(1)}\r\n              </footer>\r\n\r\n              <footer className=\"blockquote-footer\">Дата: {date}</footer>\r\n\r\n              <footer className=\"blockquote-footer\">\r\n                Максимальная температура: {highestTemp} °C\r\n              </footer>\r\n              <footer className=\"blockquote-footer\">\r\n                Минимальная температура: {lowestTemp} °C\r\n              </footer>\r\n\r\n              <footer className=\"blockquote-footer\">\r\n                Cкорость ветра - {wind} м/с,\r\n              </footer>\r\n              <footer className=\"blockquote-footer\">\r\n                Влажность - {humidity} %\r\n              </footer>\r\n              <footer className=\"blockquote-footer\">\r\n                Давление - {pressure} мм рт.\r\n              </footer>\r\n              <footer className=\"blockquote-footer\">\r\n                Облачность - {clouds}.\r\n              </footer>\r\n\r\n              <footer className=\"blockquote-footer\">\r\n                Восход солнца - {sunrise}.\r\n              </footer>\r\n              <footer className=\"blockquote-footer\">\r\n                Закат солнца - {sunset}.\r\n              </footer>\r\n            </blockquote>\r\n            <hr />\r\n            <button\r\n              className=\"btn btn-secondary\"\r\n              style={{\r\n                backgroundColor: '#b8b3dd',\r\n                border: '#b8b3dd',\r\n                color: 'white',\r\n              }}\r\n            >\r\n              <Link style={{ color: 'white' }} to={`/city/${id}`}>\r\n                Открыть прогноз\r\n              </Link>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import s from './Loader.module.css';\r\n\r\nlet Loader = () => {\r\n  return (\r\n    <div className={s.position}>\r\n      <div className={s.lds_ellipsis}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import { useSelector } from 'react-redux';\r\nimport { CityItem } from './CityItem';\r\nimport Loader from '../utils/Loader';\r\nimport { currentWeatherType, RootApp } from '../types';\r\n\r\nexport const SearchedList = () => {\r\n  const list: currentWeatherType[] = useSelector((state: RootApp) =>\r\n    Object.values(state.reducer.searchedCities)\r\n  );\r\n  const loader = useSelector((state: RootApp) => state.reducer.loading);\r\n\r\n  if (loader) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (!list || list.length === 0) {\r\n    return <h2>No data</h2>;\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row p-3 mb-5 rounded\">\r\n        {list.reverse().map((i) => {\r\n          return <CityItem cityData={i} key={Math.random() * 100} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Header } from './Header';\r\nimport { SearchedList } from './SearchedCitiesList';\r\n\r\nexport const ListOfCities = () => {\r\n  return (\r\n    <div className=\"main-content\">\r\n      <Header />\r\n      <SearchedList />\r\n    </div>\r\n  );\r\n};\r\n","import './App.css';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport { CityInfo } from './components/CityInfo';\r\nimport { ListOfCities } from './components/ListOfSities';\r\n\r\nconst App = (props: any) => {\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <Link to=\"/\" className=\"mainPageLink\">\r\n          <h4>WEATHER APP</h4>\r\n        </Link>\r\n        <Route exact path=\"/\" render={() => <ListOfCities />} />\r\n        <Route\r\n          exact\r\n          path=\"/weather-api-with-redux-tools\"\r\n          render={() => <ListOfCities />}\r\n        />\r\n        <Route path=\"/city/:cityId?\" render={() => <CityInfo {...props} />} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from '@reduxjs/toolkit';\nimport reducer from './reducer';\n\nconst store = configureStore({\n  reducer: {\n    reducer,\n  },\n});\n\nexport default store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}