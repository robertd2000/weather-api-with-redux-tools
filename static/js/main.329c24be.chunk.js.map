{"version":3,"sources":["utils/Loader.module.css","service/service.ts","redux/reducer.ts","utils/Alert.tsx","components/Header.tsx","utils/Loader.tsx","components/CityInfo/CityHeader.tsx","components/CityInfo/CityWeather.tsx","components/CityInfo/CityWeatherCard.tsx","components/CityInfo/CityWeatherData.tsx","components/ForecatHour.tsx","components/Forecast.tsx","components/CityInfo.tsx","components/SearchedCity.tsx","components/Cities.tsx","App.tsx","reportWebVitals.js","redux/store.ts","index.tsx"],"names":["module","exports","Service","id","weather","forecast","Promise","all","fetch","response","res1","res2","ok","json","getWeatherThunk","createAsyncThunk","a","getWeatherData","weatherSlice","createSlice","name","initialState","currentWeather","description","temp","wind","humidity","pressure","icon","iconCode","country","highestTemp","lowestTemp","clouds","sunrise","sunset","date","loading","alert","error","reducers","getWeather","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","data1","data2","cod","currentDate","Date","getDay","getDate","getMonth","sys","toLocaleTimeString","slice","main","temp_max","temp_min","speed","list","actions","Alert","text","className","role","Header","useState","setText","dispatch","useDispatch","useSelector","reducer","buttonHandler","e","preventDefault","onSubmit","type","value","placeholder","onChange","target","style","backgroundColor","border","Loader","s","position","lds_ellipsis","CityHeader","CityWeather","iconUrl","src","alt","CityWeatherCard","data","CityWeatherData","ForecastHour","forecastData","Math","floor","month","dt_txt","day","hour","Forecast","forecasts","map","item","dt","CityInfo","cityData","undefined","CityItem","loader","useEffect","asFn","Cities","App","props","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.329c24be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"position\":\"Loader_position__2MPw1\",\"lds_ellipsis\":\"Loader_lds_ellipsis__hmAlb\",\"lds-ellipsis1\":\"Loader_lds-ellipsis1__2yOT7\",\"lds-ellipsis2\":\"Loader_lds-ellipsis2__2zSDJ\",\"lds-ellipsis3\":\"Loader_lds-ellipsis3__1X2Wz\"};","class Service {\r\n  static async getWeatherData(id: string) {\r\n    const weather = `https://api.openweathermap.org/data/2.5/weather?q=${id}&lang=ru&appid=a9ebdb68b0dbf40182f5638efcca3afd&units=metric`;\r\n    const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${id}&lang=ru&appid=a9ebdb68b0dbf40182f5638efcca3afd&units=metric`;\r\n\r\n    const response = await Promise.all([fetch(weather), fetch(forecast)]);\r\n\r\n    try {\r\n      const [res1, res2] = response;\r\n      if (res1.ok && res2.ok) {\r\n        return Promise.all([res1.json(), res2.json()]);\r\n      }\r\n      return;\r\n    } catch {\r\n      return 'Not found';\r\n    }\r\n  }\r\n}\r\n\r\nexport default Service;\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport Service from '../service/service'\nimport { InitialStateType } from '../types'\n\nconst initialState = {\n  currentWeather: {\n    name: 'Chegem',\n    description: '',\n    temp: 10,\n    wind: 0,\n    humidity: 0,\n    pressure: 0,\n    icon: '',\n    iconCode: '',\n    id: null,\n    country: '',\n    highestTemp: 0,\n    lowestTemp: 0,\n    clouds: 0,\n    sunrise: '',\n    sunset: '',\n    date: '',\n    forecast: [],\n  },\n  loading: false,\n  alert: false,\n  error: '',\n}\n\nexport const getWeatherThunk = createAsyncThunk(\n  'weather/getWeatherThunk',\n  async (id: string) => {\n    const response = Service.getWeatherData(id)\n    return response\n  }\n)\n\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState: initialState as InitialStateType,\n  reducers: {\n    getWeather(state, action) {\n      state.currentWeather.name = action.payload.name\n      state.currentWeather.temp = action.payload.temp\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getWeatherThunk.pending, (state, action) => {\n        state.loading = true\n      })\n      .addCase(getWeatherThunk.fulfilled, (state, action) => {\n        if (!action.payload) {\n          state.loading = false\n          state.alert = true\n          state.error =\n            'Пожалуйста введите корректное название города для поиска.'\n          return state\n        }\n        const [data1, data2] = action.payload\n        if (data1.cod === '400' || !data1) {\n          state.loading = false\n          state.alert = true\n          state.error =\n            'Пустой ввод. Пожалуйста введите название города для поиска.'\n          return state\n        }\n\n        if (data1.cod === '404') {\n          state.loading = false\n          state.alert = true\n          state.error = 'Город не найден'\n          return state\n        }\n\n        if (data1.cod !== '400') {\n          const months = [\n            'Январь',\n            'Февраль',\n            'Март',\n            'Апрель',\n            'Май',\n            'Июнь',\n            'Июль',\n            'Август',\n            'Сентябрь',\n            'Октябрь',\n            'Ноябрь',\n            'Декабрь',\n          ]\n          const days = [\n            'Воскресенье',\n            'Понедельник',\n            'Вторник',\n            'Среда',\n            'Четверг',\n            'Пятница',\n            'Суббота',\n          ]\n          const currentDate = new Date()\n          const date = `${\n            days[currentDate.getDay()]\n          } ${currentDate.getDate()} ${months[currentDate.getMonth()]}`\n          const sunset = new Date(data1.sys.sunset * 1000)\n            .toLocaleTimeString()\n            .slice(0, 5)\n          const sunrise = new Date(data1.sys.sunrise * 1000)\n            .toLocaleTimeString()\n            .slice(0, 5)\n          state.currentWeather = {\n            ...state.currentWeather,\n            name: data1.name,\n            country: data1.sys.country,\n            temp: data1.main.temp,\n            highestTemp: data1.main.temp_max,\n            lowestTemp: data1.main.temp_min,\n            wind: data1.wind.speed,\n            description: data1.weather[0].description,\n            humidity: data1.main.humidity,\n            pressure: data1.main.pressure,\n            iconCode: data1.weather[0].icon,\n            id: data1.id,\n            clouds: data1.clouds.all,\n            sunrise,\n            sunset,\n            date,\n            forecast: data2.list,\n          }\n\n          state.alert = false\n        }\n        state.loading = false\n        return\n      })\n  },\n})\n\nexport const { getWeather } = weatherSlice.actions\nexport default weatherSlice.reducer\n","import React from 'react';\r\n\r\ntype AlertType = {\r\n  text: string;\r\n};\r\n\r\nexport const Alert: React.FC<AlertType> = ({ text }) => {\r\n  return (\r\n    <div className=\"alert alert-info\" role=\"alert\">\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getWeatherThunk } from '../redux/reducer'\r\nimport { RootApp } from '../types'\r\nimport { Alert } from '../utils/Alert'\r\n\r\nexport const Header = () => {\r\n  const [text, setText] = useState('Chegem')\r\n  const dispatch = useDispatch()\r\n  const alert = useSelector((state: RootApp) => state.reducer.alert)\r\n  const error = useSelector((state: RootApp) => state.reducer.error)\r\n\r\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setText(e.target.value)\r\n  }\r\n  const buttonHandler = async (e: React.SyntheticEvent) => {\r\n    e.preventDefault()\r\n    await dispatch(getWeatherThunk(text))\r\n    setText('')\r\n  }\r\n  return (\r\n    <>\r\n      <form onSubmit={buttonHandler}>\r\n        {alert ? <Alert text={error} /> : null}\r\n\r\n        <div className=\"input-group mb-3\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n            value={text}\r\n            name=\"title\"\r\n            placeholder=\"Город\"\r\n            onChange={inputHandler}\r\n          />\r\n\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              className=\"btn btn-info\"\r\n              type=\"submit\"\r\n              style={{ backgroundColor: '#b690da', border: '#b690da' }}\r\n            >\r\n              Поиск\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","import s from './Loader.module.css';\r\n\r\nlet Loader = () => {\r\n  return (\r\n    <div className={s.position}>\r\n      <div className={s.lds_ellipsis}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","type CityObj = {\r\n  name: string;\r\n  date: string;\r\n  country: string;\r\n};\r\n\r\nexport const CityHeader: React.FC<CityObj> = ({ name, country, date }) => {\r\n  return (\r\n    <div className=\"city-info\">\r\n      <h2>\r\n        {name} {country}\r\n      </h2>\r\n      <h4>{date}</h4>\r\n    </div>\r\n  );\r\n};\r\n","type CityObj = {\r\n  iconUrl: string;\r\n  temp: number;\r\n  description: string;\r\n};\r\n\r\nexport const CityWeather: React.FC<CityObj> = ({\r\n  iconUrl,\r\n  temp,\r\n  description,\r\n}) => {\r\n  return (\r\n    <div className=\"city-weather-wrapper\">\r\n      <div className=\"city-icon\">\r\n        <img src={iconUrl} alt=\"img\" />\r\n      </div>\r\n      <div className=\"city-weather-temp\">\r\n        <h3>{temp}°</h3>\r\n        <h4>{description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","type CityObj = {\r\n  data: any;\r\n  text: string;\r\n};\r\n\r\nexport const CityWeatherCard: React.FC<CityObj> = ({ data, text }) => {\r\n  return (\r\n    <div className=\"city-weather-data-info\">\r\n      <h4>{data}</h4>\r\n      <span>{text}</span>\r\n    </div>\r\n  );\r\n};\r\n","import { CityWeatherCard } from './CityWeatherCard';\r\n\r\ntype CityObj = {\r\n  highestTemp: number;\r\n  lowestTemp: number;\r\n  wind: number;\r\n  sunrise: string;\r\n  sunset: string;\r\n  humidity: number;\r\n};\r\n\r\nexport const CityWeatherData: React.FC<CityObj> = ({\r\n  highestTemp,\r\n  lowestTemp,\r\n  wind,\r\n  sunrise,\r\n  sunset,\r\n  humidity,\r\n}) => {\r\n  return (\r\n    <div className=\"city-weather-data\">\r\n      <CityWeatherCard data={highestTemp + '°'} text={'Максимальная'} />\r\n      <CityWeatherCard data={lowestTemp + '°'} text={'Минимальная'} />\r\n      <CityWeatherCard data={wind + ' миль/ч'} text={'Bетeр'} />\r\n      <CityWeatherCard data={humidity + '%'} text={'Влажность'} />\r\n      <CityWeatherCard data={sunrise} text={'Восход'} />\r\n      <CityWeatherCard data={sunset} text={'Закат'} />\r\n    </div>\r\n  );\r\n};\r\n","import { ForecastItemType } from '../types'\r\n\r\ntype ForecastHourType = {\r\n  forecastData: ForecastItemType\r\n}\r\n\r\nexport const ForecastHour: React.FC<ForecastHourType> = ({ forecastData }) => {\r\n  const temp = Math.floor(forecastData.main.temp * 1) / 1,\r\n    description = forecastData.weather[0].description,\r\n    icon = forecastData.weather[0].icon,\r\n    month = forecastData.dt_txt.slice(5, 7),\r\n    day = forecastData.dt_txt.slice(8, 10),\r\n    hour = forecastData.dt_txt.slice(11, 13)\r\n\r\n  const iconUrl = `https://openweathermap.org/img/w/${icon}.png`\r\n\r\n  return (\r\n    <div className=\"forecast-wrapper\">\r\n      <span>\r\n        {day}.{month}\r\n      </span>\r\n      <span>{hour}.00</span>\r\n      <img src={iconUrl} alt=\"icon\" />\r\n      <span>{description}</span>\r\n      <h4>{temp}°</h4>\r\n    </div>\r\n  )\r\n}\r\n","import { ForecastHour } from './ForecatHour';\r\nimport { ForecastItemType } from '../types';\r\n\r\ntype ForecastType = {\r\n  forecast: any;\r\n};\r\n\r\nexport const Forecast: React.FC<ForecastType> = ({ forecast }) => {\r\n  const forecasts = forecast.map((item: ForecastItemType) => {\r\n    return <ForecastHour key={item.dt} forecastData={item} />;\r\n  });\r\n\r\n  return <div className=\"forecasts\">{forecasts}</div>;\r\n};\r\n","import { currentWeatherType } from '../types'\r\nimport { CityHeader } from './CityInfo/CityHeader'\r\nimport { CityWeather } from './CityInfo/CityWeather'\r\nimport { CityWeatherData } from './CityInfo/CityWeatherData'\r\nimport { Forecast } from './Forecast'\r\ntype CityItemType = {\r\n  cityData: currentWeatherType\r\n}\r\nexport const CityInfo: React.FC<CityItemType> = ({ cityData }) => {\r\n  if (cityData === undefined) {\r\n    return <div>No data</div>\r\n  }\r\n\r\n  const {\r\n    name,\r\n    country,\r\n    date,\r\n    temp,\r\n    highestTemp,\r\n    lowestTemp,\r\n    description,\r\n    wind,\r\n    humidity,\r\n    iconCode,\r\n    sunrise,\r\n    sunset,\r\n    forecast,\r\n  } = cityData\r\n\r\n  const iconUrl = `https://openweathermap.org/img/w/${iconCode}.png`\r\n\r\n  return (\r\n    <div className=\"city\">\r\n      <div className=\"city-wrap\">\r\n        <CityHeader name={name} country={country} date={date} />\r\n        <CityWeather iconUrl={iconUrl} temp={temp} description={description} />\r\n        <CityWeatherData\r\n          highestTemp={highestTemp}\r\n          lowestTemp={lowestTemp}\r\n          wind={wind}\r\n          sunrise={sunrise}\r\n          sunset={sunset}\r\n          humidity={humidity}\r\n        />\r\n      </div>\r\n      <Forecast forecast={forecast} />\r\n    </div>\r\n  )\r\n}\r\n","import { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../utils/Loader'\r\nimport { CityInfo } from './CityInfo'\r\nimport { currentWeatherType, RootApp } from '../types'\r\nimport { useEffect } from 'react'\r\nimport { getWeatherThunk } from '../redux/reducer'\r\n\r\nexport const CityItem = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const currentWeather: currentWeatherType = useSelector(\r\n    (state: RootApp) => state.reducer.currentWeather\r\n  )\r\n  const loader = useSelector((state: RootApp) => state.reducer.loading)\r\n\r\n  useEffect(() => {\r\n    const asFn = async () => {\r\n      await dispatch(getWeatherThunk('Chegem'))\r\n    }\r\n    asFn()\r\n  }, [])\r\n\r\n  if (loader) {\r\n    return <Loader />\r\n  }\r\n\r\n  if (!currentWeather.id) {\r\n    return <h2>No data</h2>\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      {currentWeather.id !== null ? <CityInfo cityData={currentWeather} /> : ''}\r\n    </div>\r\n  )\r\n}\r\n","import { Header } from './Header'\r\nimport { CityItem } from './SearchedCity'\r\n\r\nexport const Cities = () => {\r\n  return (\r\n    <div className=\"main-content\">\r\n      <Header />\r\n      <CityItem />\r\n    </div>\r\n  )\r\n}\r\n","import './App.css'\r\nimport { Cities } from './components/Cities'\r\n\r\nconst App = (props: any) => {\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <a href=\"#\" className=\"mainPageLink\">\r\n          <h4>WEATHER APP</h4>\r\n        </a>\r\n\r\n        <Cities />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from '@reduxjs/toolkit';\nimport reducer from './reducer';\n\nconst store = configureStore({\n  reducer: {\n    reducer,\n  },\n});\n\nexport default store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}