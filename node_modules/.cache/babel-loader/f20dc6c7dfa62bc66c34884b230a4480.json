{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/RobertD/Desktop/MW Robert/weather-api/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/RobertD/Desktop/MW Robert/weather-api/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:/Users/RobertD/Desktop/MW Robert/weather-api/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/RobertD/Desktop/MW Robert/weather-api/node_modules/@babel/runtime/helpers/esm/createClass\";var Service=/*#__PURE__*/function(){function Service(){_classCallCheck(this,Service);}_createClass(Service,null,[{key:\"getWeatherData\",value:function(){var _getWeatherData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(id){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(id,\"&lang=ru&appid=a9ebdb68b0dbf40182f5638efcca3afd&units=metric\"));case 2:response=_context.sent;_context.prev=3;return _context.abrupt(\"return\",response.json());case 7:_context.prev=7;_context.t0=_context[\"catch\"](3);return _context.abrupt(\"return\",'Not found');case 10:case\"end\":return _context.stop();}}},_callee,null,[[3,7]]);}));function getWeatherData(_x){return _getWeatherData.apply(this,arguments);}return getWeatherData;}()}]);return Service;}();export default Service;","map":{"version":3,"sources":["C:/Users/RobertD/Desktop/MW Robert/weather-api/src/service/service.js"],"names":["Service","id","fetch","response","json"],"mappings":"kgBAAMA,CAAAA,O,yNACJ,iBAA4BC,EAA5B,qJACyBC,CAAAA,KAAK,6DAC2BD,EAD3B,iEAD9B,QACQE,QADR,+DAKWA,QAAQ,CAACC,IAAT,EALX,0FAOW,WAPX,sE,6HAYF,cAAeJ,CAAAA,OAAf","sourcesContent":["class Service {\r\n  static async getWeatherData(id) {\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${id}&lang=ru&appid=a9ebdb68b0dbf40182f5638efcca3afd&units=metric`\r\n    );\r\n    try {\r\n      return response.json();\r\n    } catch {\r\n      return 'Not found';\r\n    }\r\n  }\r\n}\r\n\r\nexport default Service;\r\n"]},"metadata":{},"sourceType":"module"}