{"ast":null,"code":"import _objectSpread from\"C:/Users/RobertD/Desktop/MW Robert/weather-api/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/RobertD/Desktop/MW Robert/weather-api/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:/Users/RobertD/Desktop/MW Robert/weather-api/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/RobertD/Desktop/MW Robert/weather-api/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import Service from'../service/service';var initialState={currentWeather:{name:'Chegem',description:null,temp:10,wind:0,humidity:0,pressure:0,icon:null,iconCode:'',id:null},searchedCities:window.localStorage.getItem('listOfCities')?JSON.parse(window.localStorage.getItem('listOfCities')):{},loading:false,alert:false,error:''};export var getWeatherThunk=createAsyncThunk('weather/getWeatherThunk',/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(id){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:response=Service.getWeatherData(id);console.log(response);return _context.abrupt(\"return\",response);case 3:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());var weatherSlice=createSlice({name:'weather',initialState:initialState,reducers:{getWeather:function getWeather(state,action){state.currentWeather.name=action.payload.name;state.currentWeather.temp=action.payload.temp;},deleteCity:function deleteCity(state,action){delete state.searchedCities[action.payload];window.localStorage.setItem('listOfCities',JSON.stringify(state.searchedCities));console.log(state.searchedCities);}},extraReducers:function extraReducers(builder){builder.addCase(getWeatherThunk.pending,function(state,action){state.loading=true;}).addCase(getWeatherThunk.fulfilled,function(state,action){if(!action.payload){state.loading=false;state.alert=true;state.error='Пожалуйста введите корректное название города для поиска.';return state;}var _action$payload=_slicedToArray(action.payload,2),data1=_action$payload[0],data2=_action$payload[1];if(data1.cod==='400'||!data1){state.loading=false;state.alert=true;state.error='Пустой ввод. Пожалуйста введите название города для поиска.';return state;}if(data1.cod==='404'){state.loading=false;state.alert=true;state.error='Город не найден';return state;}console.log(action.payload);if(data1.cod!=='400'){var months=['Январь','Февраль','Март','Апрель','Май','Июнь','Июль','Август','Сентябрь','Октябрь','Ноябрь','Декабрь'];var days=['Воскресенье','Понедельник','Вторник','Среда','Четверг','Пятница','Суббота'];var currentDate=new Date();var date=\"\".concat(days[currentDate.getDay()],\" \").concat(currentDate.getDate(),\" \").concat(months[currentDate.getMonth()]);var sunset=new Date(data1.sys.sunset*1000).toLocaleTimeString().slice(0,5);var sunrise=new Date(data1.sys.sunrise*1000).toLocaleTimeString().slice(0,5);state.currentWeather=_objectSpread(_objectSpread({},state.currentWeather),{},{name:data1.name,country:data1.sys.country,temp:data1.main.temp,highestTemp:data1.main.temp_max,lowestTemp:data1.main.temp_min,wind:data1.wind.speed,description:data1.weather[0].description,humidity:data1.main.humidity,pressure:data1.main.pressure,iconCode:data1.weather[0].icon,id:data1.id,clouds:data1.clouds.all,sunrise:sunrise,sunset:sunset,date:date,forecast:data2.list});state.searchedCities[data1.id]=state.currentWeather;state.alert=false;localStorage.setItem('listOfCities',JSON.stringify(state.searchedCities));}state.loading=false;});}});var _weatherSlice$actions=weatherSlice.actions,getWeather=_weatherSlice$actions.getWeather,deleteCity=_weatherSlice$actions.deleteCity;export{getWeather,deleteCity};export default weatherSlice.reducer;","map":{"version":3,"sources":["C:/Users/RobertD/Desktop/MW Robert/weather-api/src/redux/reducer.js"],"names":["createAsyncThunk","createSlice","Service","initialState","currentWeather","name","description","temp","wind","humidity","pressure","icon","iconCode","id","searchedCities","window","localStorage","getItem","JSON","parse","loading","alert","error","getWeatherThunk","response","getWeatherData","console","log","weatherSlice","reducers","getWeather","state","action","payload","deleteCity","setItem","stringify","extraReducers","builder","addCase","pending","fulfilled","data1","data2","cod","months","days","currentDate","Date","date","getDay","getDate","getMonth","sunset","sys","toLocaleTimeString","slice","sunrise","country","main","highestTemp","temp_max","lowestTemp","temp_min","speed","weather","clouds","all","forecast","list","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport Service from '../service/service';\r\n\r\nconst initialState = {\r\n  currentWeather: {\r\n    name: 'Chegem',\r\n    description: null,\r\n    temp: 10,\r\n    wind: 0,\r\n    humidity: 0,\r\n    pressure: 0,\r\n    icon: null,\r\n    iconCode: '',\r\n    id: null,\r\n  },\r\n  searchedCities: window.localStorage.getItem('listOfCities')\r\n    ? JSON.parse(window.localStorage.getItem('listOfCities'))\r\n    : {},\r\n  loading: false,\r\n  alert: false,\r\n  error: '',\r\n};\r\n\r\nexport const getWeatherThunk = createAsyncThunk(\r\n  'weather/getWeatherThunk',\r\n  async (id) => {\r\n    const response = Service.getWeatherData(id);\r\n    console.log(response);\r\n    return response;\r\n  }\r\n);\r\n\r\nconst weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState,\r\n  reducers: {\r\n    getWeather(state, action) {\r\n      state.currentWeather.name = action.payload.name;\r\n      state.currentWeather.temp = action.payload.temp;\r\n    },\r\n    deleteCity(state, action) {\r\n      delete state.searchedCities[action.payload];\r\n      window.localStorage.setItem(\r\n        'listOfCities',\r\n        JSON.stringify(state.searchedCities)\r\n      );\r\n      console.log(state.searchedCities);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getWeatherThunk.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(getWeatherThunk.fulfilled, (state, action) => {\r\n        if (!action.payload) {\r\n          state.loading = false;\r\n          state.alert = true;\r\n          state.error =\r\n            'Пожалуйста введите корректное название города для поиска.';\r\n          return state;\r\n        }\r\n        const [data1, data2] = action.payload;\r\n        if (data1.cod === '400' || !data1) {\r\n          state.loading = false;\r\n          state.alert = true;\r\n          state.error =\r\n            'Пустой ввод. Пожалуйста введите название города для поиска.';\r\n          return state;\r\n        }\r\n\r\n        if (data1.cod === '404') {\r\n          state.loading = false;\r\n          state.alert = true;\r\n          state.error = 'Город не найден';\r\n          return state;\r\n        }\r\n\r\n        console.log(action.payload);\r\n        if (data1.cod !== '400') {\r\n          const months = [\r\n            'Январь',\r\n            'Февраль',\r\n            'Март',\r\n            'Апрель',\r\n            'Май',\r\n            'Июнь',\r\n            'Июль',\r\n            'Август',\r\n            'Сентябрь',\r\n            'Октябрь',\r\n            'Ноябрь',\r\n            'Декабрь',\r\n          ];\r\n          const days = [\r\n            'Воскресенье',\r\n            'Понедельник',\r\n            'Вторник',\r\n            'Среда',\r\n            'Четверг',\r\n            'Пятница',\r\n            'Суббота',\r\n          ];\r\n          const currentDate = new Date();\r\n          const date = `${\r\n            days[currentDate.getDay()]\r\n          } ${currentDate.getDate()} ${months[currentDate.getMonth()]}`;\r\n          const sunset = new Date(data1.sys.sunset * 1000)\r\n            .toLocaleTimeString()\r\n            .slice(0, 5);\r\n          const sunrise = new Date(data1.sys.sunrise * 1000)\r\n            .toLocaleTimeString()\r\n            .slice(0, 5);\r\n          state.currentWeather = {\r\n            ...state.currentWeather,\r\n            name: data1.name,\r\n            country: data1.sys.country,\r\n            temp: data1.main.temp,\r\n            highestTemp: data1.main.temp_max,\r\n            lowestTemp: data1.main.temp_min,\r\n            wind: data1.wind.speed,\r\n            description: data1.weather[0].description,\r\n            humidity: data1.main.humidity,\r\n            pressure: data1.main.pressure,\r\n            iconCode: data1.weather[0].icon,\r\n            id: data1.id,\r\n            clouds: data1.clouds.all,\r\n            sunrise,\r\n            sunset,\r\n            date,\r\n            forecast: data2.list,\r\n          };\r\n\r\n          state.searchedCities[data1.id] = state.currentWeather;\r\n          state.alert = false;\r\n          localStorage.setItem(\r\n            'listOfCities',\r\n            JSON.stringify(state.searchedCities)\r\n          );\r\n        }\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { getWeather, deleteCity } = weatherSlice.actions;\r\nexport default weatherSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}