{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport Service from '../service/service';\nconst initialState = {\n  currentWeather: {\n    name: 'Chegem',\n    description: null,\n    temp: 10,\n    wind: 0,\n    humidity: 0,\n    pressure: 0,\n    icon: null,\n    iconCode: '',\n    id: null\n  },\n  searchedCities: window.localStorage.getItem('listOfCities') ? JSON.parse(window.localStorage.getItem('listOfCities')) : {},\n  loading: false,\n  alert: false,\n  error: ''\n};\nexport const getWeatherThunk = createAsyncThunk('weather/getWeatherThunk', async id => {\n  const response = Service.getWeatherData(id);\n  console.log(response);\n  return response;\n});\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    getWeather(state, action) {\n      state.currentWeather.name = action.payload.name;\n      state.currentWeather.temp = action.payload.temp;\n    },\n\n    deleteCity(state, action) {\n      delete state.searchedCities[action.payload];\n      window.localStorage.setItem('listOfCities', JSON.stringify(state.searchedCities));\n      console.log(state.searchedCities);\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getWeatherThunk.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(getWeatherThunk.fulfilled, (state, action) => {\n      if (action.payload.cod === '400') {\n        state.loading = false;\n        state.alert = true;\n        state.error = 'Пустой ввод. Пожалуйста введите название города для поиска.';\n        return state;\n      }\n\n      if (action.payload.cod === '404') {\n        state.loading = false;\n        state.alert = true;\n        state.error = 'Город не найден';\n        return state;\n      }\n\n      console.log(action.payload); // if (action.payload.cod !== '400') {\n      //   state.currentWeather = {\n      //     ...state.currentWeather,\n      //     name: action.payload.name,\n      //     temp: action.payload.main.temp,\n      //     wind: action.payload.wind.speed,\n      //     description: action.payload.weather[0].description,\n      //     humidity: action.payload.main.humidity,\n      //     pressure: action.payload.main.pressure,\n      //     iconCode: action.payload.weather[0].icon,\n      //     id: action.payload.id,\n      //   };\n      // const temp = Math.floor(action.payload.main.temp - 273);\n      // const name = action.payload.name;\n      // const weather = action.payload.weather[0].description;\n      // const wind = action.payload.wind.speed;\n      // const humidity = action.payload.main.humidity;\n      // const pressure = action.payload.main.pressure;\n      // state.currentWeather['name'] = name;\n      // state.currentWeather['temp'] = temp;\n      // state.currentWeather['description'] = weather;\n      // state.currentWeather['wind'] = wind;\n      // state.currentWeather['humidity'] = humidity;\n      // state.currentWeather['pressure'] = pressure;\n      // state.searchedCities.unshift(state.currentWeather);\n      //   state.searchedCities[action.payload.id] = state.currentWeather;\n      //   state.alert = false;\n      //   localStorage.setItem(\n      //     'listOfCities',\n      //     JSON.stringify(state.searchedCities)\n      //   );\n      // }\n      // state.loading = false;\n    });\n  }\n});\nexport const {\n  getWeather,\n  deleteCity\n} = weatherSlice.actions;\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["C:/Users/RobertD/Desktop/MW Robert/weather-api/src/redux/reducer.js"],"names":["createAsyncThunk","createSlice","Service","initialState","currentWeather","name","description","temp","wind","humidity","pressure","icon","iconCode","id","searchedCities","window","localStorage","getItem","JSON","parse","loading","alert","error","getWeatherThunk","response","getWeatherData","console","log","weatherSlice","reducers","getWeather","state","action","payload","deleteCity","setItem","stringify","extraReducers","builder","addCase","pending","fulfilled","cod","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,cAAc,EAAE;AACdC,IAAAA,IAAI,EAAE,QADQ;AAEdC,IAAAA,WAAW,EAAE,IAFC;AAGdC,IAAAA,IAAI,EAAE,EAHQ;AAIdC,IAAAA,IAAI,EAAE,CAJQ;AAKdC,IAAAA,QAAQ,EAAE,CALI;AAMdC,IAAAA,QAAQ,EAAE,CANI;AAOdC,IAAAA,IAAI,EAAE,IAPQ;AAQdC,IAAAA,QAAQ,EAAE,EARI;AASdC,IAAAA,EAAE,EAAE;AATU,GADG;AAYnBC,EAAAA,cAAc,EAAEC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,IACZC,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,CAAX,CADY,GAEZ,EAde;AAenBG,EAAAA,OAAO,EAAE,KAfU;AAgBnBC,EAAAA,KAAK,EAAE,KAhBY;AAiBnBC,EAAAA,KAAK,EAAE;AAjBY,CAArB;AAoBA,OAAO,MAAMC,eAAe,GAAGvB,gBAAgB,CAC7C,yBAD6C,EAE7C,MAAOa,EAAP,IAAc;AACZ,QAAMW,QAAQ,GAAGtB,OAAO,CAACuB,cAAR,CAAuBZ,EAAvB,CAAjB;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,SAAOA,QAAP;AACD,CAN4C,CAAxC;AASP,MAAMI,YAAY,GAAG3B,WAAW,CAAC;AAC/BI,EAAAA,IAAI,EAAE,SADyB;AAE/BF,EAAAA,YAF+B;AAG/B0B,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAAC3B,cAAN,CAAqBC,IAArB,GAA4B2B,MAAM,CAACC,OAAP,CAAe5B,IAA3C;AACA0B,MAAAA,KAAK,CAAC3B,cAAN,CAAqBG,IAArB,GAA4ByB,MAAM,CAACC,OAAP,CAAe1B,IAA3C;AACD,KAJO;;AAKR2B,IAAAA,UAAU,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACxB,aAAOD,KAAK,CAACjB,cAAN,CAAqBkB,MAAM,CAACC,OAA5B,CAAP;AACAlB,MAAAA,MAAM,CAACC,YAAP,CAAoBmB,OAApB,CACE,cADF,EAEEjB,IAAI,CAACkB,SAAL,CAAeL,KAAK,CAACjB,cAArB,CAFF;AAIAY,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACjB,cAAlB;AACD;;AAZO,GAHqB;AAiB/BuB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWhB,eAAe,CAACiB,OAD3B,EACoC,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACX,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGmB,OAJH,CAIWhB,eAAe,CAACkB,SAJ3B,EAIsC,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACrD,UAAIA,MAAM,CAACC,OAAP,CAAeS,GAAf,KAAuB,KAA3B,EAAkC;AAChCX,QAAAA,KAAK,CAACX,OAAN,GAAgB,KAAhB;AACAW,QAAAA,KAAK,CAACV,KAAN,GAAc,IAAd;AACAU,QAAAA,KAAK,CAACT,KAAN,GACE,6DADF;AAEA,eAAOS,KAAP;AACD;;AAED,UAAIC,MAAM,CAACC,OAAP,CAAeS,GAAf,KAAuB,KAA3B,EAAkC;AAChCX,QAAAA,KAAK,CAACX,OAAN,GAAgB,KAAhB;AACAW,QAAAA,KAAK,CAACV,KAAN,GAAc,IAAd;AACAU,QAAAA,KAAK,CAACT,KAAN,GAAc,iBAAd;AACA,eAAOS,KAAP;AACD;;AAEDL,MAAAA,OAAO,CAACC,GAAR,CAAYK,MAAM,CAACC,OAAnB,EAhBqD,CAiBrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAtDH;AAuDD;AAzE8B,CAAD,CAAhC;AA4EA,OAAO,MAAM;AAAEH,EAAAA,UAAF;AAAcI,EAAAA;AAAd,IAA6BN,YAAY,CAACe,OAAhD;AACP,eAAef,YAAY,CAACgB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport Service from '../service/service';\r\n\r\nconst initialState = {\r\n  currentWeather: {\r\n    name: 'Chegem',\r\n    description: null,\r\n    temp: 10,\r\n    wind: 0,\r\n    humidity: 0,\r\n    pressure: 0,\r\n    icon: null,\r\n    iconCode: '',\r\n    id: null,\r\n  },\r\n  searchedCities: window.localStorage.getItem('listOfCities')\r\n    ? JSON.parse(window.localStorage.getItem('listOfCities'))\r\n    : {},\r\n  loading: false,\r\n  alert: false,\r\n  error: '',\r\n};\r\n\r\nexport const getWeatherThunk = createAsyncThunk(\r\n  'weather/getWeatherThunk',\r\n  async (id) => {\r\n    const response = Service.getWeatherData(id);\r\n    console.log(response);\r\n    return response;\r\n  }\r\n);\r\n\r\nconst weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState,\r\n  reducers: {\r\n    getWeather(state, action) {\r\n      state.currentWeather.name = action.payload.name;\r\n      state.currentWeather.temp = action.payload.temp;\r\n    },\r\n    deleteCity(state, action) {\r\n      delete state.searchedCities[action.payload];\r\n      window.localStorage.setItem(\r\n        'listOfCities',\r\n        JSON.stringify(state.searchedCities)\r\n      );\r\n      console.log(state.searchedCities);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getWeatherThunk.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(getWeatherThunk.fulfilled, (state, action) => {\r\n        if (action.payload.cod === '400') {\r\n          state.loading = false;\r\n          state.alert = true;\r\n          state.error =\r\n            'Пустой ввод. Пожалуйста введите название города для поиска.';\r\n          return state;\r\n        }\r\n\r\n        if (action.payload.cod === '404') {\r\n          state.loading = false;\r\n          state.alert = true;\r\n          state.error = 'Город не найден';\r\n          return state;\r\n        }\r\n\r\n        console.log(action.payload);\r\n        // if (action.payload.cod !== '400') {\r\n        //   state.currentWeather = {\r\n        //     ...state.currentWeather,\r\n        //     name: action.payload.name,\r\n        //     temp: action.payload.main.temp,\r\n        //     wind: action.payload.wind.speed,\r\n        //     description: action.payload.weather[0].description,\r\n        //     humidity: action.payload.main.humidity,\r\n        //     pressure: action.payload.main.pressure,\r\n        //     iconCode: action.payload.weather[0].icon,\r\n        //     id: action.payload.id,\r\n        //   };\r\n        // const temp = Math.floor(action.payload.main.temp - 273);\r\n        // const name = action.payload.name;\r\n        // const weather = action.payload.weather[0].description;\r\n        // const wind = action.payload.wind.speed;\r\n        // const humidity = action.payload.main.humidity;\r\n        // const pressure = action.payload.main.pressure;\r\n        // state.currentWeather['name'] = name;\r\n        // state.currentWeather['temp'] = temp;\r\n        // state.currentWeather['description'] = weather;\r\n        // state.currentWeather['wind'] = wind;\r\n        // state.currentWeather['humidity'] = humidity;\r\n        // state.currentWeather['pressure'] = pressure;\r\n        // state.searchedCities.unshift(state.currentWeather);\r\n        //   state.searchedCities[action.payload.id] = state.currentWeather;\r\n        //   state.alert = false;\r\n        //   localStorage.setItem(\r\n        //     'listOfCities',\r\n        //     JSON.stringify(state.searchedCities)\r\n        //   );\r\n        // }\r\n        // state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { getWeather, deleteCity } = weatherSlice.actions;\r\nexport default weatherSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}