{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport Service from '../service/service';\nconst initialState = {\n  currentWeather: {\n    name: 'Chegem',\n    description: null,\n    temp: 10,\n    wind: 0,\n    humidity: 0,\n    pressure: 0,\n    icon: null,\n    iconCode: '',\n    id: null\n  },\n  searchedCities: window.localStorage.getItem('listOfCities') ? JSON.parse(window.localStorage.getItem('listOfCities')) : [],\n  loading: false,\n  alert: false,\n  error: ''\n};\nexport const getWeatherThunk = createAsyncThunk('weather/getWeatherThunk', async id => {\n  const response = Service.getWeatherData(id);\n  return response;\n});\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    getWeather(state, action) {\n      state.currentWeather.name = action.payload.name;\n      state.currentWeather.temp = action.payload.temp;\n    },\n\n    deleteCity(state, action) {\n      state.searchedCities.filter(i => {\n        console.log(i);\n      });\n      console.log(action);\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getWeatherThunk.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(getWeatherThunk.fulfilled, (state, action) => {\n      if (action.payload.cod === '400') {\n        state.loading = false;\n        state.alert = true;\n        state.error = 'Пустой ввод. Пожалуйста введите название города для поиска.';\n        return state;\n      }\n\n      if (action.payload.cod === '404') {\n        state.loading = false;\n        state.alert = true;\n        state.error = 'Город не найден';\n        return state;\n      }\n\n      if (action.payload.cod !== '400') {\n        state.currentWeather = { ...state.currentWeather,\n          name: action.payload.name,\n          temp: action.payload.main.temp,\n          wind: action.payload.wind.speed,\n          description: action.payload.weather[0].description,\n          humidity: action.payload.main.humidity,\n          pressure: action.payload.main.pressure,\n          iconCode: action.payload.weather[0].icon,\n          id: action.payload.id\n        }; // const temp = Math.floor(action.payload.main.temp - 273);\n        // const name = action.payload.name;\n        // const weather = action.payload.weather[0].description;\n        // const wind = action.payload.wind.speed;\n        // const humidity = action.payload.main.humidity;\n        // const pressure = action.payload.main.pressure;\n        // state.currentWeather['name'] = name;\n        // state.currentWeather['temp'] = temp;\n        // state.currentWeather['description'] = weather;\n        // state.currentWeather['wind'] = wind;\n        // state.currentWeather['humidity'] = humidity;\n        // state.currentWeather['pressure'] = pressure;\n\n        state.searchedCities.unshift(state.currentWeather);\n        state.alert = false;\n        localStorage.setItem('listOfCities', JSON.stringify(state.searchedCities));\n      }\n\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  getWeather,\n  deleteCity\n} = weatherSlice.actions;\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["C:/Users/RobertD/Desktop/MW Robert/weather-api/src/redux/reducer.js"],"names":["createAsyncThunk","createSlice","Service","initialState","currentWeather","name","description","temp","wind","humidity","pressure","icon","iconCode","id","searchedCities","window","localStorage","getItem","JSON","parse","loading","alert","error","getWeatherThunk","response","getWeatherData","weatherSlice","reducers","getWeather","state","action","payload","deleteCity","filter","i","console","log","extraReducers","builder","addCase","pending","fulfilled","cod","main","speed","weather","unshift","setItem","stringify","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport Service from '../service/service';\r\n\r\nconst initialState = {\r\n  currentWeather: {\r\n    name: 'Chegem',\r\n    description: null,\r\n    temp: 10,\r\n    wind: 0,\r\n    humidity: 0,\r\n    pressure: 0,\r\n    icon: null,\r\n    iconCode: '',\r\n    id: null,\r\n  },\r\n  searchedCities: window.localStorage.getItem('listOfCities')\r\n    ? JSON.parse(window.localStorage.getItem('listOfCities'))\r\n    : [],\r\n  loading: false,\r\n  alert: false,\r\n  error: '',\r\n};\r\n\r\nexport const getWeatherThunk = createAsyncThunk(\r\n  'weather/getWeatherThunk',\r\n  async (id) => {\r\n    const response = Service.getWeatherData(id);\r\n    return response;\r\n  }\r\n);\r\n\r\nconst weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState,\r\n  reducers: {\r\n    getWeather(state, action) {\r\n      state.currentWeather.name = action.payload.name;\r\n      state.currentWeather.temp = action.payload.temp;\r\n    },\r\n    deleteCity(state, action) {\r\n      state.searchedCities.filter((i) => {\r\n        console.log(i);\r\n      });\r\n      console.log(action);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getWeatherThunk.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(getWeatherThunk.fulfilled, (state, action) => {\r\n        if (action.payload.cod === '400') {\r\n          state.loading = false;\r\n          state.alert = true;\r\n          state.error =\r\n            'Пустой ввод. Пожалуйста введите название города для поиска.';\r\n\r\n          return state;\r\n        }\r\n\r\n        if (action.payload.cod === '404') {\r\n          state.loading = false;\r\n          state.alert = true;\r\n          state.error = 'Город не найден';\r\n\r\n          return state;\r\n        }\r\n\r\n        if (action.payload.cod !== '400') {\r\n          state.currentWeather = {\r\n            ...state.currentWeather,\r\n            name: action.payload.name,\r\n            temp: action.payload.main.temp,\r\n            wind: action.payload.wind.speed,\r\n            description: action.payload.weather[0].description,\r\n            humidity: action.payload.main.humidity,\r\n            pressure: action.payload.main.pressure,\r\n            iconCode: action.payload.weather[0].icon,\r\n            id: action.payload.id,\r\n          };\r\n          // const temp = Math.floor(action.payload.main.temp - 273);\r\n          // const name = action.payload.name;\r\n          // const weather = action.payload.weather[0].description;\r\n          // const wind = action.payload.wind.speed;\r\n          // const humidity = action.payload.main.humidity;\r\n          // const pressure = action.payload.main.pressure;\r\n          // state.currentWeather['name'] = name;\r\n          // state.currentWeather['temp'] = temp;\r\n          // state.currentWeather['description'] = weather;\r\n          // state.currentWeather['wind'] = wind;\r\n          // state.currentWeather['humidity'] = humidity;\r\n          // state.currentWeather['pressure'] = pressure;\r\n\r\n          state.searchedCities.unshift(state.currentWeather);\r\n\r\n          state.alert = false;\r\n\r\n          localStorage.setItem(\r\n            'listOfCities',\r\n            JSON.stringify(state.searchedCities)\r\n          );\r\n        }\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { getWeather, deleteCity } = weatherSlice.actions;\r\nexport default weatherSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}