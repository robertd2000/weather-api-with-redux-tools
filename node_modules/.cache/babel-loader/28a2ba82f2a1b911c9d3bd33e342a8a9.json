{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport Service from '../service/service';\nconst initialState = {\n  currentWeather: {\n    name: 'Chegem',\n    description: null,\n    temp: 10,\n    wind: 0,\n    humidity: 0,\n    pressure: 0,\n    icon: null,\n    iconCode: '',\n    id: null\n  },\n  searchedCities: window.localStorage.getItem('listOfCities') ? JSON.parse(window.localStorage.getItem('listOfCities')) : {},\n  loading: false,\n  alert: false,\n  error: ''\n};\nexport const getWeatherThunk = createAsyncThunk('weather/getWeatherThunk', async id => {\n  const response = Service.getWeatherData(id);\n  console.log(response);\n  return response;\n});\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    getWeather(state, action) {\n      state.currentWeather.name = action.payload.name;\n      state.currentWeather.temp = action.payload.temp;\n    },\n\n    deleteCity(state, action) {\n      delete state.searchedCities[action.payload];\n      window.localStorage.setItem('listOfCities', JSON.stringify(state.searchedCities));\n      console.log(state.searchedCities);\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getWeatherThunk.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(getWeatherThunk.fulfilled, (state, action) => {\n      const [data1, data2] = action.payload;\n\n      if (data1.cod === '400') {\n        state.loading = false;\n        state.alert = true;\n        state.error = 'Пустой ввод. Пожалуйста введите название города для поиска.';\n        return state;\n      }\n\n      if (data1.cod === '404') {\n        state.loading = false;\n        state.alert = true;\n        state.error = 'Город не найден';\n        return state;\n      }\n\n      console.log(action.payload);\n\n      if (data1.cod !== '400') {\n        const months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];\n        const days = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\n        const currentDate = new Date();\n        const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${months[currentDate.getMonth()]}`;\n        const sunset = new Date(data1.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\n        const sunrise = new Date(data1.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\n        state.currentWeather = { ...state.currentWeather,\n          name: data1.name,\n          country: data1.sys.country,\n          temp: data1.main.temp,\n          highestTemp: data1.main.temp_max,\n          lowestTemp: data1.main.temp_min,\n          wind: data1.wind.speed,\n          description: data1.weather[0].description,\n          humidity: data1.main.humidity,\n          pressure: data1.main.pressure,\n          iconCode: data1.weather[0].icon,\n          id: data1.id,\n          clouds: data1.clouds.all,\n          sunrise,\n          sunset,\n          date,\n          forecast: data2.list\n        };\n        state.searchedCities[data1.id] = state.currentWeather;\n        state.alert = false;\n        localStorage.setItem('listOfCities', JSON.stringify(state.searchedCities));\n      }\n\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  getWeather,\n  deleteCity\n} = weatherSlice.actions;\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["C:/Users/RobertD/Desktop/MW Robert/weather-api/src/redux/reducer.js"],"names":["createAsyncThunk","createSlice","Service","initialState","currentWeather","name","description","temp","wind","humidity","pressure","icon","iconCode","id","searchedCities","window","localStorage","getItem","JSON","parse","loading","alert","error","getWeatherThunk","response","getWeatherData","console","log","weatherSlice","reducers","getWeather","state","action","payload","deleteCity","setItem","stringify","extraReducers","builder","addCase","pending","fulfilled","data1","data2","cod","months","days","currentDate","Date","date","getDay","getDate","getMonth","sunset","sys","toLocaleTimeString","slice","sunrise","country","main","highestTemp","temp_max","lowestTemp","temp_min","speed","weather","clouds","all","forecast","list","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport Service from '../service/service';\r\n\r\nconst initialState = {\r\n  currentWeather: {\r\n    name: 'Chegem',\r\n    description: null,\r\n    temp: 10,\r\n    wind: 0,\r\n    humidity: 0,\r\n    pressure: 0,\r\n    icon: null,\r\n    iconCode: '',\r\n    id: null,\r\n  },\r\n  searchedCities: window.localStorage.getItem('listOfCities')\r\n    ? JSON.parse(window.localStorage.getItem('listOfCities'))\r\n    : {},\r\n  loading: false,\r\n  alert: false,\r\n  error: '',\r\n};\r\n\r\nexport const getWeatherThunk = createAsyncThunk(\r\n  'weather/getWeatherThunk',\r\n  async (id) => {\r\n    const response = Service.getWeatherData(id);\r\n    console.log(response);\r\n    return response;\r\n  }\r\n);\r\n\r\nconst weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState,\r\n  reducers: {\r\n    getWeather(state, action) {\r\n      state.currentWeather.name = action.payload.name;\r\n      state.currentWeather.temp = action.payload.temp;\r\n    },\r\n    deleteCity(state, action) {\r\n      delete state.searchedCities[action.payload];\r\n      window.localStorage.setItem(\r\n        'listOfCities',\r\n        JSON.stringify(state.searchedCities)\r\n      );\r\n      console.log(state.searchedCities);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getWeatherThunk.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(getWeatherThunk.fulfilled, (state, action) => {\r\n        const [data1, data2] = action.payload;\r\n        if (data1.cod === '400') {\r\n          state.loading = false;\r\n          state.alert = true;\r\n          state.error =\r\n            'Пустой ввод. Пожалуйста введите название города для поиска.';\r\n          return state;\r\n        }\r\n\r\n        if (data1.cod === '404') {\r\n          state.loading = false;\r\n          state.alert = true;\r\n          state.error = 'Город не найден';\r\n          return state;\r\n        }\r\n\r\n        console.log(action.payload);\r\n        if (data1.cod !== '400') {\r\n          const months = [\r\n            'Январь',\r\n            'Февраль',\r\n            'Март',\r\n            'Апрель',\r\n            'Май',\r\n            'Июнь',\r\n            'Июль',\r\n            'Август',\r\n            'Сентябрь',\r\n            'Октябрь',\r\n            'Ноябрь',\r\n            'Декабрь',\r\n          ];\r\n          const days = [\r\n            'Воскресенье',\r\n            'Понедельник',\r\n            'Вторник',\r\n            'Среда',\r\n            'Четверг',\r\n            'Пятница',\r\n            'Суббота',\r\n          ];\r\n          const currentDate = new Date();\r\n          const date = `${\r\n            days[currentDate.getDay()]\r\n          } ${currentDate.getDate()} ${months[currentDate.getMonth()]}`;\r\n          const sunset = new Date(data1.sys.sunset * 1000)\r\n            .toLocaleTimeString()\r\n            .slice(0, 5);\r\n          const sunrise = new Date(data1.sys.sunrise * 1000)\r\n            .toLocaleTimeString()\r\n            .slice(0, 5);\r\n          state.currentWeather = {\r\n            ...state.currentWeather,\r\n            name: data1.name,\r\n            country: data1.sys.country,\r\n            temp: data1.main.temp,\r\n            highestTemp: data1.main.temp_max,\r\n            lowestTemp: data1.main.temp_min,\r\n            wind: data1.wind.speed,\r\n            description: data1.weather[0].description,\r\n            humidity: data1.main.humidity,\r\n            pressure: data1.main.pressure,\r\n            iconCode: data1.weather[0].icon,\r\n            id: data1.id,\r\n            clouds: data1.clouds.all,\r\n            sunrise,\r\n            sunset,\r\n            date,\r\n            forecast: data2.list,\r\n          };\r\n\r\n          state.searchedCities[data1.id] = state.currentWeather;\r\n          state.alert = false;\r\n          localStorage.setItem(\r\n            'listOfCities',\r\n            JSON.stringify(state.searchedCities)\r\n          );\r\n        }\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { getWeather, deleteCity } = weatherSlice.actions;\r\nexport default weatherSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}